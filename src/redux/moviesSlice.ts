import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import * as Service from "../services/movies";

export interface IMovie {
  backdrop: string;
  cast: string[];
  classification: string;
  director: string;
  genres: string[];
  id: string;
  imdb_rating: number;
  length: string;
  overview: string;
  released_on: string;
  slug: string;
  title: string;
  poster: string;
}

export interface MoviesState {
  query: string;
  loading: boolean;
  error?: string;
  movies: IMovie[];
  list: Record<string, IMovie[]>;
}

const initialState: MoviesState = {
  query: "",
  loading: false,
  movies: [],
  list: {},
};

export const fetchMoviesByQuery = createAsyncThunk(
  "GET/fetchMoviesByQuery",
  async (query: string) => {
    const response = await Service.fetchMovies(query);
    return response;
  }
);

export const moviesSlice = createSlice({
  name: "movies",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setQuery(state, action) {
      state.query = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchMoviesByQuery.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchMoviesByQuery.fulfilled, (state, action) => {
        state.loading = false;
        const movies = action.payload.movies;

        const list: Record<string, IMovie[]> = {};

        movies.forEach((movie) => {
          for (const genre of movie.genres) {
            if (list[genre]) {
              list[genre].push(movie);
            } else {
              list[genre] = [movie];
            }
          }
        });

        state.list = list;
        state.movies = movies;
      })
      .addCase(fetchMoviesByQuery.rejected, (state) => {
        state.loading = false;
        state.error = "Something is wrong. Please try again.";
      });
  },
});

export const { setQuery } = moviesSlice.actions;

export default moviesSlice.reducer;
